package com.zcs.fast.forward.dao;

import java.util.List;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.zcs.fast.forward.entity.DownloadInfoEntity;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table DownloadInfo.
 */
public class DownloadInfoDao extends AbstractDao<DownloadInfoEntity, Long> {

	public static final String TABLENAME = "DOWNLOAD_INFO";

	/**
	 * Properties of entity DownloadInfoEntity.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {
		public final static Property Id = new Property(0, Long.class, "id", true, "_id");
		public final static Property Name = new Property(1, String.class, "name", false, "NAME");
		public final static Property Url = new Property(2, String.class, "url", false, "URL");
		public final static Property Length = new Property(3, Long.class, "length", false, "LENGTH");
		public final static Property DownSize = new Property(4, Long.class, "downSize", false, "DOWN_SIZE");
		public final static Property Percent = new Property(5, Integer.class, "percent", false, "PERCENT");
		public final static Property DownState = new Property(6, Integer.class, "downState", false, "DOWN_STATE");
	};

	public DownloadInfoDao(DaoConfig config) {
		super(config);
	}

	public DownloadInfoDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/**
	 * 覆盖插入
	 * 
	 * @param list
	 */
	public void coverList(List<DownloadInfoEntity> list) {
		deleteAll();
		for (DownloadInfoEntity entity : list) {
			super.insert(entity);
		}
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "'" + TABLENAME + "' (" + //
				"'_id' INTEGER PRIMARY KEY ," + // 0: id
				"'NAME' TEXT," + // 1: name
				"'URL' TEXT," + // 2: url
				"'LENGTH' INTEGER," + // 3: LENGTH
				"'DOWN_SIZE' INTEGER," + // 4: DOWN_SIZE
				"'PERCENT' INTEGER," + // 5: PERCENT
				"'DOWN_STATE' INTEGER);"); // 6: DOWN_STATE
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'" + TABLENAME + "'";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, DownloadInfoEntity entity) {
		stmt.clearBindings();

		Long id = entity.getId();
		if (id != null) {
			stmt.bindLong(1, id);
		}
		stmt.bindString(2, entity.getName());
		stmt.bindString(3, entity.getUrl());
		stmt.bindLong(4, entity.getLength());
		stmt.bindLong(5, entity.getDownSize());
		stmt.bindLong(6, entity.getPercent());
		stmt.bindLong(7, entity.getDownState());
	}

	/** @inheritdoc */
	@Override
	public Long readKey(Cursor cursor, int offset) {
		return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public DownloadInfoEntity readEntity(Cursor cursor, int offset) {
		Long id = cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
		String name = cursor.getString(offset + 1);
		String url = cursor.getString(offset + 2);
		Long length = cursor.getLong(offset + 3);
		Long downSize = cursor.getLong(offset + 4);
		int percent = cursor.getInt(offset + 5);
		int downState = cursor.getInt(offset + 6);
		DownloadInfoEntity entity = new DownloadInfoEntity(id, name, url, length, downSize, percent, downState);

		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, DownloadInfoEntity entity, int offset) {
		Long id = cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
		String name = cursor.getString(offset + 1);
		String url = cursor.getString(offset + 2);
		Long length = cursor.getLong(offset + 3);
		Long downSize = cursor.getLong(offset + 4);
		int percent = cursor.getInt(offset + 5);
		int downState = cursor.getInt(offset + 6);

		entity.setId(id);
		entity.setName(name);
		entity.setUrl(url);
		entity.setLength(length);
		entity.setDownSize(downSize);
		entity.setPercent(percent);
		entity.setDownState(downState);
	}

	/** @inheritdoc */
	@Override
	protected Long updateKeyAfterInsert(DownloadInfoEntity entity, long rowId) {
		entity.setId(rowId);
		return rowId;
	}

	/** @inheritdoc */
	@Override
	public Long getKey(DownloadInfoEntity entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}

}
